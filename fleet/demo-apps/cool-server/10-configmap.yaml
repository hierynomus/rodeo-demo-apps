apiVersion: v1
kind: ConfigMap
metadata:
  name: cool-server-code
  namespace: observe-a-demo
data:
  cool-server.js: |
    const http = require('http');
    const crypto = require('crypto'); // For generating random data
    const data = [];
    const cacheMaxSize = process.env.CACHE_MAX_SIZE
      ? parseInt(process.env.CACHE_MAX_SIZE, 10)
      : 50; // Default max cache size in MB

    // Convert cache max size from MB to bytes
    const cacheMaxSizeBytes = cacheMaxSize * 1024 * 1024;

    const server = http.createServer((req, res) => {
      if (data.length < cacheMaxSizeBytes) {
        // Simulate adding 1MB of data to the cache
        const randomData = crypto.randomBytes(100 * 1024); // Generate 100k of random data
        data.push(...randomData); // Append the random bytes to the data array;
        console.log(`Cache size: ${(data.length / (1024*1024)).toFixed(2)} MB of maximum ${cacheMaxSize} MB`);
      }

      res.writeHead(200, { 'Content-Type': 'text/plain' });
      res.end(`Cache size: ${data.length / (1024*1024)} MB (max: ${cacheMaxSize} MB)\n`);
    });

    server.listen(8080, () => {
      console.log(`Server running on port 8080. Cache max size: ${cacheMaxSize} MB`);
    });
  scenario.ts: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';

    export let options = {
      vus: 1,
      stages: [
        { duration: '2m', target: 0 },
        { duration: '30s', target: 4 },
        { duration: '2h', target: 4 }, // long enough for lab to continue running.
      ],
    };

    export default function () {
      let res = http.get('http://cool-server.observe-a-demo.svc.cluster.local:8080');
      check(res, { 'status was 200': (r) => r.status === 200 });
      sleep(1);
    }
